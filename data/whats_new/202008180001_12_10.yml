---
- title: Create and view requirements in GitLab
  body: |
    The first step towards managing requirements from within GitLab is here! This initial release allows users to create and view requirements at a project level.

    As Requirements Management evolves in GitLab, stay tuned for support for traceability between all artifacts, creating a seamless workflow to visually demonstrate completeness and compliance.
  stage: Plan
  self-managed: true
  gitlab-com: true
  packages: [Ultimate]
  url: https://docs.gitlab.com/ee/user/project/requirements/index.html
  image_url: https://docs.gitlab.com/ee/user/project/requirements/img/requirements_list_v13_5.png
  published_at: 2020-04-22
  release: 12.10
- title: Retrieve CI/CD secrets from HashiCorp Vault
  body: |
    In this release, GitLab adds support for lightweight JSON Web Token (JWT) authentication to integrate with your existing HashiCorp Vault.

    Now, you can seamlessly provide secrets to CI/CD jobs by taking advantage of [HashiCorp's JWT authentication method](https://www.vaultproject.io/docs/auth/jwt) rather than manually having to provide secrets as a variable in GitLab.
  stage: Release
  self-managed: true
  gitlab-com: true
  packages: [Free, Premium, Ultimate]
  url: https://docs.gitlab.com/ee/ci/examples/authenticating-with-hashicorp-vault/index.html
  image_url: https://about.gitlab.com/images/12_10/jwt-vault-1.png
  published_at: 2020-04-22
  release: 12.10
- title: Epic and Issue Health Tracking
  body: |
    To help users track projects and in-flight work GitLab now enables you to report on and quickly respond to the health of individual issues and epics by showing a red, amber, or green health status on your Epic Tree.

    Assign an issue a health status of **On track** (green), **Needs attention** (amber), or **At risk** (red) and see an aggregate report of health at the Epic level.

    Quickly view and analyze where a collection of work is at risk so you can open up the right discussions at the right time and keep work on track!
  stage: Plan
  self-managed: true
  gitlab-com: true
  packages: [Ultimate]
  url: https://docs.gitlab.com/ee/user/project/issues/index.html#health-status
  image_url: https://about.gitlab.com/images/12_10/epic-health-status.png
  published_at: 2020-04-22
  release: 12.10
- title: Import Issues from Jira to GitLab
  body: |
    Until now, the only way to get Jira issues into GitLab was manually, with our CSV importer, or by hand-rolling your own migration utility.

    GitLab 12.10 includes an [MVC](https://about.gitlab.com/handbook/product/product-principles/#the-minimal-viable-change-mvc) to automatically import your Jira issues into GitLab. This is the first of [many planned enhancements](https://gitlab.com/groups/gitlab-org/-/epics/2738) to make transitioning from Jira to GitLab as frictionless as possible.
  stage: Plan
  self-managed: true
  gitlab-com: true
  packages: [Free, Premium, Ultimate]
  url: https://docs.gitlab.com/ee/user/project/import/jira.html
  image_url: https://about.gitlab.com/images/12_10/jira-importer.png
  published_at: 2020-04-22
  release: 12.10
- title: Autoscaling GitLab CI jobs on AWS Fargate
  body: |
    You can now auto-scale GitLab CI on AWS Fargate with the MVC release of GitLab’s AWS Fargate Driver.

    With this new autoscaling pattern, [GitLab’s AWS Fargate driver](https://gitlab.com/gitlab-org/ci-cd/custom-executor-drivers/fargate) automatically runs each build in a separate and isolated container on Amazon’s Elastic Container Service (ECS) using a user-defined container image.
  stage: Verify
  self-managed: true
  gitlab-com: false
  packages: [Free, Premium, Ultimate]
  url: https://gitlab.com/gitlab-org/ci-cd/custom-executor-drivers/fargate/-/blob/master/docs/README.md
  image_url: https://about.gitlab.com/images/12_9/autoscaling_ci_fargate.png
  published_at: 2020-04-22
  release: 12.10

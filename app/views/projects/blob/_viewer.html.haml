- hidden = local_assigns.fetch(:hidden, false)
- render_error = viewer.render_error
- rich_type = viewer.type == :rich ? viewer.partial_name : nil
- load_async = local_assigns.fetch(:load_async, viewer.load_async? && render_error.nil?)
- external_embed = local_assigns.fetch(:external_embed, false)

- viewer_url = local_assigns.fetch(:viewer_url) { url_for(safe_params.merge(viewer: viewer.type, format: :json)) } if load_async
- add_page_startup_api_call viewer_url
.blob-viewer{ data: { type: viewer.type, rich_type: rich_type, url: viewer_url, path: viewer.blob.path }, class: ('hidden' if hidden) }
  - if render_error
    = render 'projects/blob/render_error', viewer: viewer
  - elsif load_async
    = render viewer.loading_partial_path, viewer: viewer
  - elsif external_embed
    = render 'projects/blob/viewers/highlight_embed', blob: viewer.blob
  - else
    - viewer.prepare!

    -# In the rare case where the first kilobyte of the file looks like text,
    -# but the file turns out to actually be binary after loading all data,
    -# we fall back on the binary Download viewer.
    - viewer = BlobViewer::Download.new(viewer.blob) if viewer.binary_detected_after_load?

    = render viewer.partial_path, viewer: viewer

